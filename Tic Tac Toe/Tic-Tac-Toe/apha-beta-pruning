import math

# Constants for players
HUMAN = 'X'
AI = 'O'
EMPTY = ' '

# Initialize the board
board = [
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY]
]

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
    print("\n")

# Function to check for a win
def check_winner(board, player):
    # Check rows, columns, and diagonals
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

# Function to check if the board is full
def is_full(board):
    return all(cell != EMPTY for row in board for cell in row)

# Minimax with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    # Check for terminal states
    if check_winner(board, AI):
        return 10 - depth
    if check_winner(board, HUMAN):
        return depth - 10
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    score = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY
                    best_score = max(best_score, score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        return best_score  # Prune
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    score = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY
                    best_score = min(best_score, score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        return best_score  # Prune
        return best_score

# Function to get the best move for AI
def best_move(board):
    best_score = -math.inf
    move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                score = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    
    return move

# Function to play the game
def play():
    print("Tic-Tac-Toe: You are X, AI is O")
    print_board(board)

    while True:
        # Human move
        row, col = map(int, input("Enter row and column (0-2): ").split())
        if board[row][col] != EMPTY:
            print("Invalid move! Try again.")
            continue
        board[row][col] = HUMAN
        print_board(board)

        if check_winner(board, HUMAN):
            print("You win!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI move
        print("AI is thinking...")
        ai_move = best_move(board)
        board[ai_move[0]][ai_move[1]] = AI
        print_board(board)

        if check_winner(board, AI):
            print("AI wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

# Run the game
play()
